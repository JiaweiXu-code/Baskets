 require(Rcpp);
 require(RcppArmadillo);
 require(RcppNumerical);

 
## generate the model matrix; 
model.matix = function(K0)
{
	
	if (K0==1)  model.matrix = matrix(c(1,0),1,0)
	if (K0==2)  model.matrix = as.matrix(expand.grid(c(1,0),c(1,0)))
	if (K0==3)  model.matrix = as.matrix(expand.grid(c(1,0),c(1,0),c(1,0)))
	if (K0==4)  model.matrix = as.matrix(expand.grid(c(1,0),c(1,0),c(1,0),c(1,0)))
	if (K0==5)  model.matrix = as.matrix(expand.grid(c(1,0),c(1,0),c(1,0),c(1,0),c(1,0)))

	colnames(model.matrix) <- NULL
	
	num.null = c(apply((model.matrix==1),1,sum));
	
	model.matrix = model.matrix[order(num.null),]
	model.matrix = model.matrix[, ncol(model.matrix):1]
	
	return(model.matrix);
}
 
 
 
sourceCpp(code='
 
   // [[Rcpp::depends(RcppArmadillo)]]
   // [[Rcpp::depends(RcppEigen)]]
   // [[Rcpp::depends(RcppNumerical)]]
   
	#include <RcppArmadillo.h>
	#include <RcppNumerical.h>   
	#include <vector>

	using namespace Rcpp;
	using namespace Numer;  

	//#define DEBUG_PRINT 
    //#define DEBUG_MCMC	
	
	// normal prior for intercept regression parameter;
	#define TAU00  0.001
	#define BETA00 0.000

	// gamma (share,iscale) prior for precision paramter in normal models;
	#define ALPHA0 0.001
	#define BETA0 0.001

	// bhm hyper parameters mean;
	#define TAU0   0.001
	#define MU0    0.000

	// bhm hyper parameters precision;
	#define SHAPE0  1.5
	#define ISCALE0 0.0
   

	// utility functions;
	double logistic_mean(arma::mat x, double offset)
	{
		arma::vec p0 = exp(x.col(0)           ) / (1.0 + exp(x.col(0)         ));
		arma::vec p1 = exp(x.col(0) + offset + x.col(1)) / (1.0 + exp(x.col(0)+ offset + x.col(1)));
		return mean(p1-p0) ; 
	}
   
   
	// basket trial data object;
	class datObj {
	   public:

		int z;     /* treatment group **/
		double y;  /* y could be binary, count, or continuous */
		int b;
		double et;
		double at;
		double ft;
	};   

	// basket trial data summary statistic object (basket summary statistics);
	class basketSumStat {
	   public:

		double n[2];
		double y[2];
		double ss[2];
	};  


	// function to order patient data by time to outcome ascertainment;
	 bool compare_follow_up_time(const datObj &a, const datObj &b)
	{
			return a.ft < b.ft;
	}    
   
   
	double fcs_binomial(arma::rowvec parms, basketSumStat d, arma::rowvec hyper, double offset)
	{
	
		arma::mat data(2,2);
		data(0,0) =  d.y[0];
		data(0,1) =  d.n[0]-d.y[0];	
		
		data(1,0) =  d.y[1];
		data(1,1) =  d.n[1]-d.y[1];				
	
		double fcs = 0;
		for (int z=0;z<=1;z++)
		{
			double linearPredictor = parms[0] + z * ( parms[1] + offset );
			fcs += linearPredictor * data(z,0) - ( data(z,0) + data(z,1) )*log( 1 + exp( linearPredictor ) );
		}
		fcs   += -0.5*TAU00*pow( parms[0] - BETA00 ,2);
		fcs   += -0.5*hyper[1]*pow( parms[1] - hyper[0] , 2 );
	  
		return fcs;
	}
	 
	double fcs_normal(arma::rowvec parms, basketSumStat d, arma::rowvec hyper, double offset)
	{
	
		arma::mat data(2,3);
		data(0,0) =  d.n[0];
		data(0,1) =  d.y[0];	
		data(0,2) =  d.ss[0];	
		
		data(1,0) =  d.n[1];
		data(1,1) =  d.y[1];	
		data(1,2) =  d.ss[1];			
	

		double fcs = 0;
		for (int z=0;z<=1;z++)
		{
			double theta = parms[2+z];
			double tau   = exp(theta);
			double mu    = parms[0] + z * ( parms[1] + offset );
			
			// likelihood component
			fcs += 0.5*data(z,0)*theta - 0.5*tau*( data(z,2) - 2*data(z,0)*data(z,1)*mu + data(z,0)*mu*mu );
			
			// prior for dispersion parameter (transformed gamma prior);
			fcs += theta*ALPHA0 - BETA0*tau;
		}
		fcs   += -0.5*TAU00*pow( parms[0] - BETA00 ,2);
		fcs   += -0.5*hyper[1]*pow( parms[1] - hyper[0] , 2 );
	 
		return fcs;
	}   
   
	arma::rowvec slice_fcs(	double (*logfn)(arma::rowvec parms, basketSumStat d, arma::rowvec hyper, double offset),
							arma::rowvec parms, 
							basketSumStat d, 
							arma::rowvec hyper,
							double offset = 0,
							int m = 10,
							double w = 1,
							double lower = -INFINITY,
							double upper = INFINITY) 
	{

		int nParms = parms.size();
	  
		double b0, f0, f0_L, f0_R, f0_x1, h0, L, R, V, J, K;
		arma::rowvec parm0;
	  
		for (int p = 0; p < nParms; p++) 
		{
			// create vector of parameters to modify for slice sampling;
			arma::rowvec parm0 = parms;

			// current value of the parameter in question;
			b0 = parm0(p);
			
			// calculate current full conditional value;
			f0 = logfn(parm0,d,hyper,offset);

			// calculate height of the horizontal slice;
			h0 = f0 - ::Rf_rexp(1.0);		

			// Calculate initial horizontal interval;
			L = parm0(p) - ::Rf_runif(0.0,1.0)*w;
			R = L+w;  
		
			// Step out;
			V = ::Rf_runif(0.0,1.0);
			J = floor(m*V);
			K = (m-1)-J;	

			parm0(p) = L; f0_L = logfn(parm0,d,hyper,offset);
			parm0(p) = R; f0_R = logfn(parm0,d,hyper,offset); 

			while(J>0 and h0<f0_L and L>-10)
			{
				L        = L-w; if (L<=-10) {L=-10;}
				J        = J-1;
				parm0(p) = L; 
				f0_L     = logfn(parm0,d,hyper,offset);
			}
			while(K>0 and h0<f0_R and R<10)
			{
				R        = R+w; if (R>=10) {R=10;}
				K        = K-1;
				parm0(p) = R; 
				f0_R     = logfn(parm0,d,hyper,offset);
			}			


			// perform rejection sampling;
			int stop  = 0;
			while(stop == 0)
			{
				parm0(p)     = L + ::Rf_runif(0.0,1.0)*(R-L);
				f0_x1        = logfn(parm0,d,hyper,offset);

				if      ( h0       <  f0_x1 ) { parms(p) = parm0(p); stop = 1;  }
				else if ( parm0(p) <  b0    ) { L = parm0(p);                   }
				else if ( parm0(p) >= b0    ) { R = parm0(p);                   }
				
				if (-0.0000000001 <= L-R and L-R <= 0.0000000001)
				{
					parms(p)= 0.5*(L+R);
					stop      = 1;
				}
			}		
		}

		return parms;
	}
 

	arma::mat slice_binomial(int nMC,arma::rowvec parms, basketSumStat d, arma::rowvec hyper, double offset)
	{
		int nParms = parms.size();
		arma::mat samples (nMC,nParms);
		
		arma::rowvec cParms = parms;
		for (int s=0;s<nMC;s++)
		{
			cParms = slice_fcs(fcs_binomial,cParms,d,hyper,offset);
			samples.row(s) = cParms;
		}
		return samples;
	}

	arma::mat slice_normal(int nMC,arma::rowvec parms, basketSumStat d, arma::rowvec hyper, double offset)
	{
		int nParms = parms.size();
		arma::mat samples (nMC,nParms);
		
		arma::rowvec cParms = parms;
		for (int s=0;s<nMC;s++)
		{
			cParms = slice_fcs(fcs_normal,cParms,d,hyper,offset);
			samples.row(s) = cParms;
		}
		return samples;
	}


	std::vector<arma::mat> slice_bhm(int nMC, CharacterVector dataTypes, std::vector<basketSumStat> dataSet, arma::rowvec offsetVec)
	{
		
		int K0 = dataSet.size();
		
		std::vector<arma::rowvec> parmSet(K0+1);
		for (int k=0;k<K0;k++)
		{		
			if (dataTypes[k]=="BINARY")
			{
				parmSet[k].set_size(2);
				parmSet[k].zeros();
			}
			if (dataTypes[k]=="NORMAL")
			{
				parmSet[k].set_size(4);
				parmSet[k].zeros();
			}		
		}
		
		parmSet[K0].set_size(2);
		parmSet[K0].zeros();
		parmSet[K0][1] = 1;
		
		std::vector<arma::mat> samples(K0+1);
		for (int k=0;k<K0;k++)
		{
			int dim;
				 if (dataTypes[k]=="BINARY")  {dim=2;}
			else if (dataTypes[k]=="NORMAL") {dim=4;}
			
			samples[k].set_size(nMC,dim);
		}
		samples[K0].set_size(nMC,2);	
		
		for (int s=0;s<nMC;s++)
		{
			double reg_s  = 0; // sum of treatment effect parameters;
			double reg_ss = 0; // sum of treatment effect parameters values squared;
			
			for (int k=0;k<K0;k++)
			{
				if (dataTypes[k]=="BINARY")
				{
					parmSet[k] = slice_fcs(fcs_binomial,parmSet[k],dataSet[k],parmSet[K0],offsetVec[k]);
				}
				if (dataTypes[k]=="NORMAL")
				{
					parmSet[k] = slice_fcs(fcs_normal,parmSet[k],dataSet[k],parmSet[K0],offsetVec[k]);
				}
				samples[k].row(s) = parmSet[k];		

				reg_s  +=     parmSet[k][1];
				reg_ss += pow(parmSet[k][1],2);
			}
			
			// update hyperparameters;
			double reg_mn = reg_s / K0;
			
			// update mean;
			double vr0      = pow(parmSet[K0][1]*K0 + TAU0,-1);
			double sd0      = pow(vr0,0.5);
			double mu0      = (parmSet[K0][1]*K0*reg_mn + MU0*TAU0)*vr0;
			
			parmSet[K0][0]  = ::Rf_rnorm(mu0,sd0);
			
			// update precision;
			reg_ss = reg_ss - 2 * reg_s * parmSet[K0][0] + K0 * pow(parmSet[K0][0],2);
			
			double shape0   = SHAPE0      + 0.5*K0;
			double scale0   = pow(ISCALE0 + 0.5*reg_ss,-1);
			
			double v = 10000;
			double thresh = pow(0.05,-2);
			
			while(v>thresh)
			{
				v  = ::Rf_rgamma(shape0,scale0);
			}
			parmSet[K0][1]  = v;
			
			samples[K0].row(s) = parmSet[K0];
			
		}

		return samples;
	}	  
   
   
	// [[Rcpp::export]]
	Rcpp::List BHM_Design (int nSims, int nMC, CharacterVector dataTypes, arma::irowvec nMaxBasket, arma::vec ppEffCrit, arma::vec ppFutCrit, arma::vec eParms, arma::mat oParms, Rcpp::List trueParms, arma::rowvec offsetVec)
	{   

		// initialize random number generator;
		RNGScope scope;  

		// calculate the number of baskets;
		int K0 = dataTypes.size();	

		// containers for simulation results;
		arma::mat all_PostProbs(nSims,K0);
		arma::mat all_PostMeans(nSims,K0);
		arma::mat all_Efficacy(nSims,K0     ,arma::fill::zeros);
		arma::mat all_Futility(nSims,K0     ,arma::fill::zeros);
		arma::mat all_Indeterminate(nSims,K0,arma::fill::zeros);
		arma::mat all_n(nSims,K0,arma::fill::zeros);
		
		
		arma::mat all_durations(nSims,K0,arma::fill::zeros);
		arma::vec all_fwr(nSims,arma::fill::zeros);
		arma::vec all_numRejectCorrect(nSims,arma::fill::zeros);		
		
		// calculate total number of subjects;
		int nMax = sum(nMaxBasket);
		
		// calculate enrollment distrution scale parameters;
		arma::vec eScales = 1.0 / eParms;		
		
		// create container for data generation parameters;
		// dgp = data generation parameters;
		std::vector<arma::mat> dgp(K0);
		for (int k=0;k<K0;k++)
		{
		
			if (dataTypes[k]=="BINARY")
			{
				dgp[k].set_size(2,1);
				dgp[k].col(0) = as<arma::vec>( trueParms[k] );	                      // response rate;			
			}
			else if (dataTypes[k]=="NORMAL")
			{			
				dgp[k].set_size(2,2);
				dgp[k].col(0)  = as<arma::vec>( as<Rcpp::List>( trueParms[k] )[0] ) ; // means 
				dgp[k].col(1)  = as<arma::vec>( as<Rcpp::List>( trueParms[k] )[1] ) ; // standard deviations
			}		
		}
		

		for (int s=0;s<nSims;s++)
		{
			// allocate a data object for one subject;
			datObj d;
			
			// allocate data object container for all possible subjects;
			std::vector<datObj> bData(nMax);
			
			// allocate data object container for sufficient statistics;
			std::vector<arma::mat> suff_stat(K0);
			
			// simulate the data for all subjects and baskets;
			int idx=0;
			for (int k=0;k<K0;k++)
			{
			
				if (dataTypes[k]=="BINARY")
				{
					suff_stat[k].set_size(2,2);		
				}
				else if (dataTypes[k]=="NORMAL")
				{
					suff_stat[k].set_size(2,3);
				}	

				suff_stat[k].zeros();				

				
				double cumTime = 0;
				for (int n=0;n<nMaxBasket[k];n++)
				{
					d.b       = k;
					cumTime   = cumTime + R::rexp(eScales[k]);
					d.et      = cumTime;                           // simulate enrollment time;
					d.at      = R::rnorm(oParms[0],oParms[1]);     // simulate response ascertainment time;
					d.ft      = d.et + d.at;                       // calculate total follow-up time;
					
					d.z       = R::rbinom(1,0.5);                  // simulate 1:1 randomization;
					
					// simulate response;
					if (dataTypes[k]=="BINARY")
					{
						d.y       = R::rbinom(1,dgp[k](d.z,0)); 
					}
					else if (dataTypes[k]=="NORMAL")
					{
						d.y       = R::rnorm(dgp[k](d.z,0),dgp[k](d.z,1)); 
					}
					bData[idx] = d;
					idx++;
				}

			}

			// put the data in chronological order based on outcome ascertainment;
			std::sort(bData.begin(), bData.end(), compare_follow_up_time);			
			
			
			// determine the time at which each of the K0 analyses takes place;
			arma::irowvec nCount(K0,arma::fill::zeros);
			arma::irowvec unsorted_nTrig(K0,arma::fill::zeros);
			arma::rowvec  duration(K0,arma::fill::zeros);
			for (int n=0;n<nMax;n++)
			{
				int k = bData[n].b;
				nCount[k]+=1;
				
				if ( nCount[k]==nMaxBasket[k] ) 
				{ 
					unsorted_nTrig[k]    = n; 
					duration[k] = bData[n].ft;
				}
			}
			arma::irowvec nTrig = sort(unsorted_nTrig);
			
			#ifdef DEBUG_PRINT
			Rcout << unsorted_nTrig << std::endl << nTrig << std::endl << duration << std::endl;
			#endif 
			
			// container for whether enrollment is open in a basket (1=Yes;0=No)
			arma::irowvec active(K0,arma::fill::ones);			
			
			// hypothesis testing result for basket (1=Efficacy;-1=Futility;0=Indeterminate)
			arma::irowvec decision(K0,arma::fill::zeros);
		

			// containers for final study results;
			arma::rowvec basket_specific_pp(K0, arma::fill::zeros);				
			arma::rowvec basket_specific_mn(K0, arma::fill::zeros);

			// containers for final study data;
			arma::irowvec nVec(K0, arma::fill::zeros);	

			// loop over K0 analyzes;
			for (int i=0;i<K0;i++)
			{

				// ---------------------------------------------------------------------------------------------------
				//accumulate data up to current interim analysis;	
				
				int nStart,nStop;
				if (i==0) 
				{
					nStart = 0; 
					nStop  = nTrig[i];
				}
				else
				{
					nStart = nTrig[i-1]+1;
					nStop  = nTrig[i];
				}
			
				for (int n=nStart;n<=nStop;n++)
				{
					int b       = bData[n].b;         // basket for current observation;
					
					if (active[b]==1)
					{
						int z       = bData[n].z;     // treatment group for current basket;
						
						double y    = bData[n].y;	  // data value for current observation;

						nVec[b]     +=1;			  // increment sample size for basket;
						
						suff_stat[b](z,0) += 1;       // increment sample size for treatment group within basket;
						suff_stat[b](z,1) += y;       // increment sum of values for treatment group within basket;
						
						if (dataTypes[b]=="NORMAL")
						{
							suff_stat[b](z,2) += y*y; // increment sum of squares for treatment group within basket;
						}			
					}
				}
				
				// ---------------------------------------------------------------------------------------------------
				// compute summary statistics based on current data;
				// bss = basket summary statistics;
				std::vector<basketSumStat> bss(K0);
				
				for (int k=0;k<K0;k++)
				{
					basketSumStat dat;
					
					for (int z=0;z<=1;z++)
					{
						dat.n[z] = suff_stat[k](z,0);
						dat.y[z] = suff_stat[k](z,1);
						
						if (dataTypes[k]=="NORMAL")
						{
							dat.y[z]  = dat.y[z]/dat.n[z];
							dat.ss[z] = suff_stat[k](z,2);
						}
					}			
					bss[k] = dat;
				}  
				

				
				std::vector<arma::mat> samples = slice_bhm(nMC,dataTypes,bss,offsetVec);
				for (int k=0;k<K0;k++)
				{
					if (dataTypes[k]=="BINARY")
					{
						basket_specific_mn[k] = logistic_mean(samples[k],offsetVec[k]);
					}
					else if (dataTypes[k]=="NORMAL")
					{
						basket_specific_mn[k] = mean(samples[k].col(1) - samples[k].col(0)) + offsetVec[k] ; 
					}				
					
					basket_specific_pp[k] = (double) sum(((samples[k].col(1)+ offsetVec[k])>0)) / (double) nMC;
				}

						

				for (int k=0;k<K0;k++)
				{

					if      ((basket_specific_pp[k]>=ppEffCrit[k]) and (nVec[k] == nMaxBasket[k])                                           ) { active[k] = 0; decision[k] =  1;   }
					else if ((basket_specific_pp[k]<=ppFutCrit[k]) and (nVec[k] >= (int) nMaxBasket[k]*0.5) and  (nVec[k] <  nMaxBasket[k]) ) { active[k] = 0; decision[k] = -1;   }					

				}
				
				if (max(active)==0) 
				{ 
					i=10000;
				}	

				#ifdef DEBUG_PRINT
					Rcout << "Current Enrollment = " << nVec << " " << sum(nVec) << std::endl;
					Rcout << "Currently Active = " << active << std::endl;
				#endif 

				
			}
			all_PostProbs.row(s)     = basket_specific_pp;
			all_PostMeans.row(s)     = basket_specific_mn;
			
				for (int k=0;k<K0;k++)
				{
					if (decision[k]==1)       {all_Efficacy(s,k) = 1.0;     }
					else if (decision[k]==-1) {all_Futility(s,k) = 1.0;     }
					else                      {all_Indeterminate(s,k) = 1.0;}	
					
					if ((decision[k]==1) and (dgp[k](0,0)>=dgp[k](1,0))) { all_fwr[s] = 1;}
					if ((decision[k]==1) and (dgp[k](0,0)< dgp[k](1,0))) { all_numRejectCorrect[s] += 1; }
					
					
					
				}			

			arma::rowvec nVecDouble = arma::conv_to<arma::rowvec>::from(nVec);				
			all_n.row(s) = nVecDouble;
			all_durations.row(s) = duration;

			#ifdef DEBUG_MCMC
			    Rcpp::Rcout << "DATA START" << std::endl;
				for (int n=0;n<nMax;n++)
				{
					Rcpp::Rcout << bData[n].b << "  " << bData[n].y << "  " << bData[n].z << std::endl;
				}
				Rcpp::Rcout << "DATA END" << std::endl;
				
			    Rcpp::Rcout << "SUMMARY STATISTICS START" << std::endl;
				for (int k=0;k<K0;k++)
				{
					for (int z=0;z<=1;z++)
					{
						Rcpp::Rcout << suff_stat[k](z,0) << "  " << suff_stat[k](z,1) << "  " << suff_stat[k](z,2) << std::endl;
					}
					
				}
				Rcpp::Rcout << "SUMMARY STATISTICS END" << std::endl;				
			#endif 

			
		}


		
		Rcpp::List PE = Rcpp::List::create(  
											Rcpp::Named("pm")       = mean(all_PostMeans),
											Rcpp::Named("pp")       = mean(all_PostProbs)
										  );
														
		Rcpp::List HT = Rcpp::List::create(  
											Rcpp::Named("eff")      = mean(all_Efficacy),								  
											Rcpp::Named("fut")      = mean(all_Futility),								  
											Rcpp::Named("ind")      = mean(all_Indeterminate),
											Rcpp::Named("fwer")     = mean(all_fwr),
											Rcpp::Named("ncr")      = mean(all_numRejectCorrect)
										  );
																												
		Rcpp::List SS = Rcpp::List::create(  
											Rcpp::Named("ave")         = mean(all_n),
											Rcpp::Named("med")         = median(all_n),								  
											Rcpp::Named("min")         = min(all_n),
											Rcpp::Named("max")         = max(all_n)	
										  );														
														
		Rcpp::List DU = Rcpp::List::create(  
											Rcpp::Named("ave")      = mean(all_durations),
											Rcpp::Named("med")      = median(all_durations),								  
											Rcpp::Named("min")      = min(all_durations),
											Rcpp::Named("max")      = max(all_durations)		
										  );	

										  
		return Rcpp::List::create(
									Rcpp::Named("PE")    = PE,
									Rcpp::Named("HT")    = HT,	
									Rcpp::Named("SS")    = SS,									
									Rcpp::Named("DR")    = DU							  			  
								);

		
	}
   
'
)